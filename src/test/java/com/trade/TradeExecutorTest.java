/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.trade;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import com.pojo.Trade;
import com.trade.exception.IllegalArgumentException;
import com.trade.store.TradeStore;
import com.utils.DateTimeUtils;

/**
 * @author Dinesh
 *
 */

public class TradeExecutorTest {
	@SuppressWarnings("deprecation")
	@Rule
	public ExpectedException exceptionRule = ExpectedException.none();

	@Test
	public void testAdd() throws Exception {
		final TradeExecutor classUnderTest = new TradeExecutor();
		final TradeStore store = new TradeStore();
		classUnderTest.setTradeStore(store);

		final Trade trade1 = new Trade("T1", 1, "CP-1", "B1", DateTimeUtils.getDate("20-05-2021"),
				DateTimeUtils.getDate("29-09-2020"), 'N');

		assertTrue("Add should return 'true'", classUnderTest.add(trade1));
		assertEquals(1, classUnderTest.getTradeStore().getTrades().size());
	}

	@Test
	public void testUpdateForVersion() throws Exception {
		final TradeExecutor classUnderTest = new TradeExecutor();
		final TradeStore store = new TradeStore();
		classUnderTest.setTradeStore(store);

		final Trade trade1 = new Trade("T1", 1, "CP-1", "B1", DateTimeUtils.getDate("20-05-2021"),
				DateTimeUtils.getDate("29-09-2020"), 'N');

		assertTrue("Add should return 'true'", classUnderTest.add(trade1));
		assertEquals(1, classUnderTest.getTradeStore().getTrades().size());
		
		final Trade trade2 = new Trade("T1", 1, "CP-1", "B1", DateTimeUtils.getDate("20-06-2021"),
				DateTimeUtils.getDate("29-09-2020"), 'N');
		
		assertTrue("Add should return 'true'", classUnderTest.add(trade2));
		assertEquals(1, classUnderTest.getTradeStore().getTrades().size());
		assertEquals(0, classUnderTest.getTradeStore().getTrades().get(0).getmDate().compareTo(DateTimeUtils.getDate("20-06-2021")));

	}
	
	@Test
	public void testLowerVersion() throws Exception {
		exceptionRule.expect(IllegalArgumentException.class);
		exceptionRule.expectMessage("New version can not be lower than current version.");
		final TradeExecutor classUnderTest = new TradeExecutor();
		final TradeStore store = new TradeStore();
		classUnderTest.setTradeStore(store);
		final Trade trade1 = new Trade("T1", 2, "CP-1", "B1", DateTimeUtils.getDate("20-05-2021"),
				DateTimeUtils.getDate("29-09-2020"), 'N');

		assertTrue("Add should return 'true'", classUnderTest.add(trade1));
		assertEquals(1, classUnderTest.getTradeStore().getTrades().size());

		Integer lowerVersion = 1;
		final Trade trade2 = new Trade("T1", lowerVersion, "CP-1", "B1", DateTimeUtils.getDate("20-05-2021"),
				DateTimeUtils.getDate("29-09-2020"), 'N');
		classUnderTest.add(trade2);
	}

	@Test
	public void testInvalidMaturityDate() throws Exception {
		exceptionRule.expect(IllegalArgumentException.class);
		exceptionRule.expectMessage("Maturity date can not be older than today's date.");
		final TradeExecutor classUnderTest = new TradeExecutor();
		final TradeStore store = new TradeStore();
		classUnderTest.setTradeStore(store);
		final Trade trade1 = new Trade("T1", 2, "CP-1", "B1", DateTimeUtils.getDate("20-05-2014"),
				DateTimeUtils.getDate("29-09-2020"), 'N');
		classUnderTest.add(trade1);
	}

	@Test
	public void testAutoUpdateExpiredFlag() throws Exception {
		// Pre conditions
		final TradeExecutor classUnderTest = new TradeExecutor();
		final TradeStore store = new TradeStore();
		final Trade trade1 = new Trade("T1", 2, "CP-1", "B1", DateTimeUtils.getDate("20-05-2014"),
				DateTimeUtils.getDate("29-09-2020"), 'N');
		store.add(trade1);
		classUnderTest.setTradeStore(store);

		// Test Condition
		classUnderTest.executeMaturityTrades();
		assertEquals('Y', classUnderTest.getTradeStore().getTrades().get(0).getExpired());
	}
	
	// TODO Need more clarity..
	@Test
	public void testTradeSortOrder() throws Exception {
		final TradeExecutor classUnderTest = new TradeExecutor();
		final TradeStore store = new TradeStore();
		classUnderTest.setTradeStore(store);

		final Trade trade1 = new Trade("T1", 1, "CP-1", "B1", DateTimeUtils.getDate("20-05-2021"),
				DateTimeUtils.getDate("29-09-2020"), 'N');
		final Trade trade2 = new Trade("T2", 1, "CP-1", "B1", DateTimeUtils.getDate("20-05-2021"),
				DateTimeUtils.getDate("29-09-2020"), 'N');
		final Trade trade3 = new Trade("T3", 3, "CP-3", "B2", DateTimeUtils.getDate("20-05-2021"),
				DateTimeUtils.getDate("29-09-2020"), 'Y');
		final Trade trade4 = new Trade("T2", 2, "CP-2", "B1", DateTimeUtils.getDate("20-05-2021"),
				DateTimeUtils.getDate("29-09-2020"), 'N');

		assertTrue("Add should return 'true'", classUnderTest.add(trade1));
		assertTrue("Add should return 'true'", classUnderTest.add(trade2));
		assertTrue("Add should return 'true'", classUnderTest.add(trade3));
		assertTrue("Add should return 'true'", classUnderTest.add(trade4));
		
		assertEquals(4, classUnderTest.getTradeStore().getTrades().size());
		assertEquals(new Integer(2), classUnderTest.getTradeStore().getTrades().get(1).getVersion());
	}
}
